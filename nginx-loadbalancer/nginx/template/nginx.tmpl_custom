daemon off;

user root root;
worker_processes  auto;
worker_rlimit_nofile 100000;

events {
    use epoll;
    worker_connections 65536;
    accept_mutex off;
    multi_accept on;
}

http {

    lua_package_path '/usr/local/openresty/site/lualib/?.lua;/usr/local/openresty/lualib/?.lua;/usr/local/openresty/sg/?.lua;;';
    lua_code_cache on;

    lua_shared_dict persistent_storage 64m; # For lua-resty-waf only

    lua_shared_dict prometheus_metrics 10M;

    ## General Options
    charset                 utf-8;
    ignore_invalid_headers    on;
    recursive_error_pages      on;
    server_tokens             off;
    server_name_in_redirect   off;
    output_buffers 32 1m;
    source_charset          utf-8;
    sendfile on;

    ## Gzip settings
    gzip_http_version 1.0;
    gzip             on;
    gzip_comp_level  4;
    gzip_min_length  1000;
    gzip_proxied     expired no-cache no-store private auth;
    gzip_buffers 16 1m;
    gzip_types  text/plain
                text/xml
                text/css
                application/xml
                application/xhtml+xml
                application/rss+xml
                application/atom_xml
                application/javascript
                application/x-javascript
                application/x-httpd-php;

    gzip_disable     "msie6";
    gzip_disable      "Mozilla/4";
    gzip_vary on;

    ## Open file cache
    open_file_cache max=65535 inactive=60s;
    open_file_cache_min_uses 1;
    open_file_cache_valid 3600s;
    open_file_cache_errors on;

     ## TCP options
    tcp_nopush on;
    tcp_nodelay on;
    
    send_timeout            60;

    reset_timedout_connection on;
    client_header_buffer_size 32k;
    large_client_header_buffers 4 32k;
    client_header_timeout   60s;
    server_names_hash_bucket_size 512;
    client_max_body_size 30M;
    
    # header
    #add_header Introduce "Hello!! Misfit";
    more_clear_headers Server;
    underscores_in_headers on;

    client_body_timeout     client_body_timeout_value;
    keepalive_timeout       keepalive_timeout_value;
    proxy_max_temp_file_size    proxy_max_temp_file_size_value;
    proxy_connect_timeout      proxy_connect_timeout_value;
    proxy_send_timeout         proxy_send_timeout_value;
    proxy_read_timeout         proxy_read_timeout_value;
    proxy_buffer_size         proxy_buffer_size_value;
    proxy_buffers           proxy_buffers_value;
    proxy_busy_buffers_size    proxy_busy_buffers_size_value;
    proxy_temp_file_write_size proxy_temp_file_write_size_value;
    proxy_intercept_errors     on;
    proxy_next_upstream error timeout http_502 http_504;
    proxy_cache_use_stale timeout updating http_502 http_503 http_504;
    proxy_http_version 1.1;

    proxy_set_header Host $Host;

    # Log
    log_format log '[$time_local] $server_addr $host $http_x_forwarded_for "$upstream_addr" ($request_time) $request_length "$request" "$upstream_status" $status "$http_referer" $body_bytes_sent "$upstream_response_time" "$http_user_agent" ';

    log_format log_v2 'server_addr:$server_addr\t'
                      'host:$host clients:$http_x_forwarded_for\t'
                      'upstream:$upstream_addr\t'
                      'request_time:$request_time\t'
                      'request_lenght:$request_length\t'
                      'request:$request\t'
                      'upstream_status:$upstream_status\t'
                      'request_status:$status\t'
                      'referer:$http_referer\t'
                      'body_bytes_sendt:$body_bytes_sent\t'
                      'upstream_response_time:$upstream_response_time\t'
                      'user_agent:$http_user_agent';

    error_log /var/log/nginx/nginx_error.log;
    access_log /var/log/nginx/nginx_access.log log;
    access_log /var/log/nginx/nginx_access_v2.log log_v2;


    init_by_lua_block {

        prometheus = require("prometheus").init("prometheus_metrics")
        metric_requests = prometheus:counter(
        "nginx_http_requests_total", "Number of HTTP requests", {"host", "status"})
        metric_latency = prometheus:histogram(
        "nginx_http_request_duration_seconds", "HTTP request latency", {"host"})
        metric_connections = prometheus:gauge("nginx_http_connections", "Number of HTTP connections", {"state"})

        -- use resty.core for performance improvement, see the status note above
        require "resty.core"

        -- require the base module
        local lua_resty_waf = require "resty.waf"

        -- perform some preloading and optimization
        lua_resty_waf.init()
    }

    server {
      listen 9145;
      access_log off;
      location /metrics {

        content_by_lua 'prometheus:collect()';

      }
    }

    server {
        listen 81;

        server_name __;

        location = /check {
            root /var/www/html/;
            index check;
        }

        location / {
            resolver 127.0.0.1 valid=30s;

            access_by_lua_block {
                local lrw = require "resty.waf"
                local waf = lrw:new()
                waf:set_option("debug", true)

                waf:set_option("debug_log_level", ngx.DEBUG)
                waf:set_option("event_log_level", ngx.DEBUG)
                waf:set_option("event_log_altered_only", false)
                -- Add more infor to event log
                waf:set_option("event_log_ngx_vars", "host")
                waf:set_option("event_log_ngx_vars", "request_id")
                waf:set_option("event_log_request_arguments", true)
                waf:set_option("event_log_request_body", true)
                waf:set_option("event_log_request_headers", true)
                waf:set_option("req_tid_header", true)

                waf:set_option("allow_unknown_content_types", true)

                -- ACTIVE/INACTIVE/SIMULATE(test rule )
                waf:set_option("mode", "SIMULATE")

                -- defines buffer to hold events logs before flush
                waf:set_option("event_log_buffer_size", 8192)
                -- flush the event log buffer every 30 seconds
                waf:set_option("event_log_periodic_flush", 30)
                waf:set_option("event_log_target", "file") -- socket(support only one address),error(nginx error log, default),file
                waf:set_option("event_log_target_path", "/var/log/nginx/nginx_event.log")

                waf:set_option("event_log_periodic_flush", 5)

                waf:set_option("score_threshold", 1)
                
                waf:set_option("ignore_rule", 21006)

                waf:exec()
            }

            log_by_lua_block {

                local host = ngx.var.host:gsub("^www.", "")
                metric_requests:inc(1, {host, ngx.var.status})
                metric_latency:observe(ngx.now() - ngx.req.start_time(), {host})
                metric_connections:set(ngx.var.connections_reading, {"reading"})
                metric_connections:set(ngx.var.connections_waiting, {"waiting"})
                metric_connections:set(ngx.var.connections_writing, {"writing"})

                local lrw = require "resty.waf"
                local waf = lrw:new()
                waf:write_log_events()
            }

            proxy_pass backend_upstream_value;
        }
    }
}